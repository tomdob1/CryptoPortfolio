security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto' # automatically uses the latest hashing algorithm
        App\Entity\User:
            algorithm: auto


    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true # do not authenticate user until you need to
            provider: app_user_provider # ties the firewall to the user provider entity
            remember_me: #remember me on sign in
                secret: '%kernel.secret%'
                signature_properties: [password] #checks to see if password is correct -> if remember me cookie is set but password has changed then we sign the user out
#                always_remember_me: true
            logout: true # configured to /logout
            custom_authenticator: App\Security\LoginFormAuthenticator
            entry_point: App\Security\LoginFormAuthenticator #advises where the entrypoint code is for users who have not logged in but are attempting to access a path that requires authorisation

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
     - { path: ^/admin, roles: ROLE_ADMIN } # if the path begins with /admin - deny access unless the user has a role of ROLE_ADMIN
     - { path: ^/profile, roles: ROLE_USER }